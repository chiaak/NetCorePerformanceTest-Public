using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace NetCorePerformanceTest.SpanTest
{
    public class Crypt
    {

        #region // Dictionary Mapping 
        private static Dictionary<byte, string> mapEncode = new Dictionary<byte, string>(){
            { 0,"000"},{ 1,"001"},{ 2,"002"},{ 3,"003"},{ 4,"004"},{ 5,"005"},{ 6,"006"},{ 7,"007"},
            { 8,"008"},{ 9,"009"},{ 10,"010"},{ 11,"011"},{ 12,"012"},{ 13,"013"},{ 14,"014"},{ 15,"015"},
            { 16,"016"},{ 17,"017"},{ 18,"018"},{ 19,"019"},{ 20,"020"},{ 21,"021"},{ 22,"022"},{ 23,"023"},
            { 24,"024"},{ 25,"025"},{ 26,"026"},{ 27,"027"},{ 28,"028"},{ 29,"029"},{ 30,"030"},{ 31,"031"},
            { 32,"032"},{ 33,"033"},{ 34,"034"},{ 35,"035"},{ 36,"036"},{ 37,"037"},{ 38,"038"},{ 39,"039"},
            { 40,"040"},{ 41,"041"},{ 42,"042"},{ 43,"043"},{ 44,"044"},{ 45,"045"},{ 46,"046"},{ 47,"047"},
            { 48,"048"},{ 49,"049"},{ 50,"050"},{ 51,"051"},{ 52,"052"},{ 53,"053"},{ 54,"054"},{ 55,"055"},
            { 56,"056"},{ 57,"057"},{ 58,"058"},{ 59,"059"},{ 60,"060"},{ 61,"061"},{ 62,"062"},{ 63,"063"},
            { 64,"064"},{ 65,"065"},{ 66,"066"},{ 67,"067"},{ 68,"068"},{ 69,"069"},{ 70,"070"},{ 71,"071"},
            { 72,"072"},{ 73,"073"},{ 74,"074"},{ 75,"075"},{ 76,"076"},{ 77,"077"},{ 78,"078"},{ 79,"079"},
            { 80,"080"},{ 81,"081"},{ 82,"082"},{ 83,"083"},{ 84,"084"},{ 85,"085"},{ 86,"086"},{ 87,"087"},
            { 88,"088"},{ 89,"089"},{ 90,"090"},{ 91,"091"},{ 92,"092"},{ 93,"093"},{ 94,"094"},{ 95,"095"},
            { 96,"096"},{ 97,"097"},{ 98,"098"},{ 99,"099"},{ 100,"100"},{ 101,"101"},{ 102,"102"},{ 103,"103"},
            { 104,"104"},{ 105,"105"},{ 106,"106"},{ 107,"107"},{ 108,"108"},{ 109,"109"},{ 110,"110"},{ 111,"111"},
            { 112,"112"},{ 113,"113"},{ 114,"114"},{ 115,"115"},{ 116,"116"},{ 117,"117"},{ 118,"118"},{ 119,"119"},
            { 120,"120"},{ 121,"121"},{ 122,"122"},{ 123,"123"},{ 124,"124"},{ 125,"125"},{ 126,"126"},{ 127,"127"},
            { 128,"128"},{ 129,"129"},{ 130,"130"},{ 131,"131"},{ 132,"132"},{ 133,"133"},{ 134,"134"},{ 135,"135"},
            { 136,"136"},{ 137,"137"},{ 138,"138"},{ 139,"139"},{ 140,"140"},{ 141,"141"},{ 142,"142"},{ 143,"143"},
            { 144,"144"},{ 145,"145"},{ 146,"146"},{ 147,"147"},{ 148,"148"},{ 149,"149"},{ 150,"150"},{ 151,"151"},
            { 152,"152"},{ 153,"153"},{ 154,"154"},{ 155,"155"},{ 156,"156"},{ 157,"157"},{ 158,"158"},{ 159,"159"},
            { 160,"160"},{ 161,"161"},{ 162,"162"},{ 163,"163"},{ 164,"164"},{ 165,"165"},{ 166,"166"},{ 167,"167"},
            { 168,"168"},{ 169,"169"},{ 170,"170"},{ 171,"171"},{ 172,"172"},{ 173,"173"},{ 174,"174"},{ 175,"175"},
            { 176,"176"},{ 177,"177"},{ 178,"178"},{ 179,"179"},{ 180,"180"},{ 181,"181"},{ 182,"182"},{ 183,"183"},
            { 184,"184"},{ 185,"185"},{ 186,"186"},{ 187,"187"},{ 188,"188"},{ 189,"189"},{ 190,"190"},{ 191,"191"},
            { 192,"192"},{ 193,"193"},{ 194,"194"},{ 195,"195"},{ 196,"196"},{ 197,"197"},{ 198,"198"},{ 199,"199"},
            { 200,"200"},{ 201,"201"},{ 202,"202"},{ 203,"203"},{ 204,"204"},{ 205,"205"},{ 206,"206"},{ 207,"207"},
            { 208,"208"},{ 209,"209"},{ 210,"210"},{ 211,"211"},{ 212,"212"},{ 213,"213"},{ 214,"214"},{ 215,"215"},
            { 216,"216"},{ 217,"217"},{ 218,"218"},{ 219,"219"},{ 220,"220"},{ 221,"221"},{ 222,"222"},{ 223,"223"},
            { 224,"224"},{ 225,"225"},{ 226,"226"},{ 227,"227"},{ 228,"228"},{ 229,"229"},{ 230,"230"},{ 231,"231"},
            { 232,"232"},{ 233,"233"},{ 234,"234"},{ 235,"235"},{ 236,"236"},{ 237,"237"},{ 238,"238"},{ 239,"239"},
            { 240,"240"},{ 241,"241"},{ 242,"242"},{ 243,"243"},{ 244,"244"},{ 245,"245"},{ 246,"246"},{ 247,"247"},
            { 248,"248"},{ 249,"249"},{ 250,"250"},{ 251,"251"},{ 252,"252"},{ 253,"253"},{ 254,"254"},{ 255,"255"}}
            ;
        private static Dictionary<string, byte> mapDEncode = new Dictionary<string, byte>(){
            {"000", 0},{"001", 1},{"002", 2},{"003", 3},{"004", 4},{"005", 5},{"006", 6},{"007", 7},
            {"008", 8},{"009", 9},{"010", 10},{"011", 11},{"012", 12},{"013", 13},{"014", 14},{"015", 15},
            {"016", 16},{"017", 17},{"018", 18},{"019", 19},{"020", 20},{"021", 21},{"022", 22},{"023", 23},
            {"024", 24},{"025", 25},{"026", 26},{"027", 27},{"028", 28},{"029", 29},{"030", 30},{"031", 31},
            {"032", 32},{"033", 33},{"034", 34},{"035", 35},{"036", 36},{"037", 37},{"038", 38},{"039", 39},
            {"040", 40},{"041", 41},{"042", 42},{"043", 43},{"044", 44},{"045", 45},{"046", 46},{"047", 47},
            {"048", 48},{"049", 49},{"050", 50},{"051", 51},{"052", 52},{"053", 53},{"054", 54},{"055", 55},
            {"056", 56},{"057", 57},{"058", 58},{"059", 59},{"060", 60},{"061", 61},{"062", 62},{"063", 63},
            {"064", 64},{"065", 65},{"066", 66},{"067", 67},{"068", 68},{"069", 69},{"070", 70},{"071", 71},
            {"072", 72},{"073", 73},{"074", 74},{"075", 75},{"076", 76},{"077", 77},{"078", 78},{"079", 79},
            {"080", 80},{"081", 81},{"082", 82},{"083", 83},{"084", 84},{"085", 85},{"086", 86},{"087", 87},
            {"088", 88},{"089", 89},{"090", 90},{"091", 91},{"092", 92},{"093", 93},{"094", 94},{"095", 95},
            {"096", 96},{"097", 97},{"098", 98},{"099", 99},{"100", 100},{"101", 101},{"102", 102},{"103", 103},
            {"104", 104},{"105", 105},{"106", 106},{"107", 107},{"108", 108},{"109", 109},{"110", 110},{"111", 111},
            {"112", 112},{"113", 113},{"114", 114},{"115", 115},{"116", 116},{"117", 117},{"118", 118},{"119", 119},
            {"120", 120},{"121", 121},{"122", 122},{"123", 123},{"124", 124},{"125", 125},{"126", 126},{"127", 127},
            {"128", 128},{"129", 129},{"130", 130},{"131", 131},{"132", 132},{"133", 133},{"134", 134},{"135", 135},
            {"136", 136},{"137", 137},{"138", 138},{"139", 139},{"140", 140},{"141", 141},{"142", 142},{"143", 143},
            {"144", 144},{"145", 145},{"146", 146},{"147", 147},{"148", 148},{"149", 149},{"150", 150},{"151", 151},
            {"152", 152},{"153", 153},{"154", 154},{"155", 155},{"156", 156},{"157", 157},{"158", 158},{"159", 159},
            {"160", 160},{"161", 161},{"162", 162},{"163", 163},{"164", 164},{"165", 165},{"166", 166},{"167", 167},
            {"168", 168},{"169", 169},{"170", 170},{"171", 171},{"172", 172},{"173", 173},{"174", 174},{"175", 175},
            {"176", 176},{"177", 177},{"178", 178},{"179", 179},{"180", 180},{"181", 181},{"182", 182},{"183", 183},
            {"184", 184},{"185", 185},{"186", 186},{"187", 187},{"188", 188},{"189", 189},{"190", 190},{"191", 191},
            {"192", 192},{"193", 193},{"194", 194},{"195", 195},{"196", 196},{"197", 197},{"198", 198},{"199", 199},
            {"200", 200},{"201", 201},{"202", 202},{"203", 203},{"204", 204},{"205", 205},{"206", 206},{"207", 207},
            {"208", 208},{"209", 209},{"210", 210},{"211", 211},{"212", 212},{"213", 213},{"214", 214},{"215", 215},
            {"216", 216},{"217", 217},{"218", 218},{"219", 219},{"220", 220},{"221", 221},{"222", 222},{"223", 223},
            {"224", 224},{"225", 225},{"226", 226},{"227", 227},{"228", 228},{"229", 229},{"230", 230},{"231", 231},
            {"232", 232},{"233", 233},{"234", 234},{"235", 235},{"236", 236},{"237", 237},{"238", 238},{"239", 239},
            {"240", 240},{"241", 241},{"242", 242},{"243", 243},{"244", 244},{"245", 245},{"246", 246},{"247", 247},
            {"248", 248},{"249", 249},{"250", 250},{"251", 251},{"252", 252},{"253", 253},{"254", 254},{"255", 255}
        };

        #endregion
        #region // 字串加解密
        /// <summary>
        /// 對字串加密
        /// </summary>
        /// <param name="sData">被加密的字串</param>
        /// <param name="key">Key</param>
        /// <returns>加密後的字串</returns>
        public static string EncryptString(string sData, string key)
        {
            byte[] ret = Encrypt((new UnicodeEncoding()).GetBytes(sData), key);
            StringBuilder sbRet = new StringBuilder("");

            foreach (byte data in ret)
            {
                sbRet.Append(mapEncode[data]);// data.ToString("000"));
            }
            return sbRet.ToString();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sData"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static string DecryptString(string sData, string key)
        {
            byte[] input = new Byte[sData.Length / 3];
            try
            {
                int idx = 0;
                for (int i = 0; i < input.Length; i++)
                {
                    input[i] = mapDEncode[sData.Substring(idx, 3)]; // byte.Parse(sData.Substring(i * 3, 3));
                    idx += 3;
                }
            }
            catch (Exception e5)
            {
                string s1 = e5.Message;
                s1 = e5.Message;
                return "";
            }

            byte[] ret = Decrypt(input, key);
            return (new UnicodeEncoding()).GetString(ret);

        }
        #endregion

        #region // Byte Level 加解密
        private static Dictionary<string, ICryptoTransform> mapDeser = new Dictionary<string, ICryptoTransform>();
        /// <summary>
        /// 
        /// </summary>
        /// <param name="byteData"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static byte[] Encrypt(byte[] byteData, string key)
        {
            MemoryStream ms = new MemoryStream();

            ICryptoTransform tdes = null;
            if (mapDeser.ContainsKey(key) == true)
            {
                tdes = mapDeser[key];
            }
            else
            {
                TripleDESCryptoServiceProvider DES = new TripleDESCryptoServiceProvider();
                MD5CryptoServiceProvider hashMD5 = new MD5CryptoServiceProvider();
                DES.Key = hashMD5.ComputeHash(ASCIIEncoding.ASCII.GetBytes(key));
                DES.Mode = CipherMode.ECB;
                tdes = DES.CreateEncryptor();
                mapDeser.Add(key, tdes);
            }

            CryptoStream encStream = new CryptoStream(ms, tdes, CryptoStreamMode.Write);

            encStream.Write(byteData, 0, byteData.Length);
            encStream.Close();
            return ms.ToArray();
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="byteData"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public static byte[] Decrypt(byte[] byteData, string key)
        {
            try
            {
                MemoryStream ms = new MemoryStream();

                TripleDESCryptoServiceProvider DES = new TripleDESCryptoServiceProvider();
                MD5CryptoServiceProvider hashMD5 = new MD5CryptoServiceProvider();

                DES.Key = hashMD5.ComputeHash(ASCIIEncoding.ASCII.GetBytes(key));
                DES.Mode = CipherMode.ECB;

                ICryptoTransform tdes = DES.CreateDecryptor();
                CryptoStream decStream = new CryptoStream(ms, tdes, CryptoStreamMode.Write);

                decStream.Write(byteData, 0, byteData.Length);
                decStream.Close();

                return ms.ToArray();
            }
            catch
            {
                return new byte[] { 0 };
            }
        }
        #endregion

    }
}
